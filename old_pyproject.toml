[project]
name = "LLMs for Retrieval augmented generation."
version = "0.5.0"
description = "A small project playing with large language models (LLMs) for retrieval augmented generation and a simple interface for both interactive queries and collecting data."
readme = "./readme.md"
license = {file = "LICENSE.MD"}
keywords = ["data", "test", "Run away", "Camelot", "Rabbit"]
authors = [
    {name = "Alex Baker", email = "temp_email@example.com"}
]
maintainers = [
    {name = "Alex Baker", email = "temp_email@example.com"}
]

# Configure the code coverage tool with default options
[tool.coverage.run]
source = ["src"]
omit = [
    # Omit singular sites as largely ad-hoc one-use
    "src/singular_sites/*",
    # __init__.py is empty and there for project structure
    "**/__init__.py",
    # Main.py has not custom code, just calls other pieces
    "main.py"
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--cov --cov-report html --cov-report term-missing --cov-fail-under 70 --report-log=./logs/pytest_log_results.jsonl"
testpaths = [
    "tests"
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]

ignore_errors = true

[tool.coverage.html]
directory = "logs/coverage_html_report"

# Configure the python formatter, black, with default options
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'